{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introdu\u00e7\u00e3o","text":"<p>Essa documenta\u00e7\u00e3o fala a respeito sobre o Google Colab e o Python.</p> <p>Alunos: </p> <ul> <li>Alan Paim Muller (32447680)</li> <li>Bruna Fabro (38358611)</li> <li>Jo\u00e3o Pedro Pegorini (21995303)</li> <li>Kevin Galarza (23382783)</li> <li>Luan Zanon (26298716)</li> <li>Renan Mussatto (0256371)</li> </ul>"},{"location":"Google%20Colab/","title":"Google Colab","text":""},{"location":"Google%20Colab/#1-o-que-e","title":"1. O que \u00e9?","text":"<p>Desenvolvido pela Google Research, o Google Colaboratory (ou Google Colab), \u00e9 uma IDE (Integrated Development Environment ou em portugu\u00eas Ambiente de Desenvolvimento Integrado) gratuita em nuvem que executa c\u00f3digos interativos chamados de notebooks no computador, sem a necessidade de instalar algum software. Foi criado para incentivar o estudo de Intelig\u00eancia Artificial (IA) e Aprendizado de M\u00e1quina. Nele, o usu\u00e1rio pode facilmente compartilhar e modificar o c\u00f3digo.</p>"},{"location":"Google%20Colab/#2-o-que-sao-notebooks","title":"2. O que s\u00e3o notebooks?","text":"<p>Um notebook \u00e9 uma esp\u00e9cie de caderno, onde s\u00e3o documentadas hist\u00f3rias por partes que seguem um fluxo l\u00f3gico, desde introdu\u00e7\u00e3o at\u00e9 conclus\u00e3o. Podem ser compostos por blocos de texto, blocos de c\u00f3digo e tamb\u00e9m imagens, gr\u00e1ficos e equa\u00e7\u00f5es matem\u00e1ticas. Neles, o usu\u00e1rio pode executar determinadas partes (c\u00e9lulas) do c\u00f3digo observando sua sa\u00edda e, tamb\u00e9m, fazer as altera\u00e7\u00f5es necess\u00e1rias. Geralmente s\u00e3o utilizados em estudos de Ci\u00eancia de Dados (como Aprendizado de M\u00e1quina) e podem ser compartilhados entre usu\u00e1rios e modificado pelos mesmos.</p>"},{"location":"Google%20Colab/#3-o-que-sao-celulas","title":"3. O que s\u00e3o c\u00e9lulas?","text":"<p>As c\u00e9lulas s\u00e3o os blocos onde c\u00f3digo e texto ser\u00e3o escritos e executados. Em um notebook, existem dois tipos principais de c\u00e9lulas:</p> <ul> <li> <p>C\u00e9lulas de texto/Markdown: utilizam a sintaxe markdown para marca\u00e7\u00e3o e s\u00e3o utilizadas para adicionar texto formatado, listas, cabe\u00e7alhos, links, imagens, entre outros;</p> </li> <li> <p>C\u00e9lulas de c\u00f3digo: s\u00e3o utilizadas para escrever e executar c\u00f3digos, possibilitando a execu\u00e7\u00e3o por partes.</p> </li> </ul>"},{"location":"Google%20Colab/#4-o-que-e-o-jupyter","title":"4. O que \u00e9 o Jupyter?","text":"<p>Fundado em 2015 e originado do IPython (2014), o Jupyter \u00e9 um software gratuito e de c\u00f3digo aberto criado para que os usu\u00e1rios possam desenvolver em diversas linguagens de programa\u00e7\u00e3o. O nome do projeto faz alus\u00e3o \u00e0s tr\u00eas linguagens de programa\u00e7\u00e3o principais suportadas pelo Jupyter: Julia, Python e R. Al\u00e9m disso, presta homenagem aos cadernos de anota\u00e7\u00f5es de Galileu, onde ele documentou a descoberta das luas de J\u00fapiter.</p>"},{"location":"Google%20Colab/#5-principais-operacoes-da-ferramenta","title":"5. Principais opera\u00e7\u00f5es da ferramenta","text":"<p>Abaixo est\u00e3o descritos os principais componentes da interface do Google Colaboratory:</p> <p>1. Barra de ferramentas</p> <p></p> <ul> <li> <p>Arquivo: criar um novo arquivo, abrir um arquivo j\u00e1 existente, enviar um arquivo do computador, renomear, mover, deletar, salvar, fazer download, imprimir, entre outras;</p> </li> <li> <p>Editar: desfazer e refazer a\u00e7\u00f5es, selecionar todas as c\u00e9lulas, recortar c\u00e9lular, copiar c\u00e9lulas, colar c\u00e9lulas, localiz\u00e1-las, exclu\u00ed-las, entre outras;</p> </li> <li> <p>Ver: \u00edndice, informa\u00e7\u00f5es e op\u00e7\u00f5es de visualiza\u00e7\u00e3o do documento;</p> </li> <li> <p>Inserir: inserir c\u00e9lulas de c\u00f3digo ou texto, entre outras;</p> </li> <li> <p>Ambiente de execu\u00e7\u00e3o: op\u00e7\u00f5es de execu\u00e7\u00e3o, interromper, reiniciar, desconectar, alterar tipo de ambiente e op\u00e7\u00f5es de gerenciamento;</p> </li> <li> <p>Ferramentas: paleta de ferramentas, configura\u00e7\u00f5es e atalhos;</p> </li> <li> <p>Ajuda: ferramentas de ajuda, como: perguntas frequentes, enviar feedback, informar bugs, termos de servi\u00e7o, entre outras.</p> </li> </ul> <p>2. Barra lateral superior</p> <p></p> <ul> <li>\u00cdndice;</li> <li>Localizar e substituir;</li> <li>Vari\u00e1veis: mostra todas as vari\u00e1veis utilizadas no c\u00f3digo;</li> <li>Secrets: mant\u00e9m e gerencia informa\u00e7\u00f5es sens\u00edveis, como senhas e outros dados sens\u00edveis que n\u00e3o se deseja exibir no c\u00f3digo do notebook;</li> <li>Arquivos: \u00e1rvore de arquivos contidos no ambiente;</li> </ul> <p>3. Barra lateral inferior</p> <p></p> <ul> <li>Snippets de c\u00f3digos: pequenos trechos de c\u00f3digo pronto que podem ser f\u00e1cil e rapidamente adicionados ao seu notebook;</li> <li>Paleta de comandos;</li> <li>Terminal (ferramenta premium): terminal do ambiente de execu\u00e7\u00e3o, por\u00e9m, s\u00f3 \u00e9 poss\u00edvel o acesso ap\u00f3s inscrever-se no Colab Pro (servi\u00e7o pago).</li> </ul> <p>4. Adicionar c\u00e9lulas de c\u00f3digo ou texto</p> <p></p> <p>5. C\u00e9lulas de c\u00f3digo/texto</p> <p></p>"},{"location":"Python/","title":"Caracter\u00edsticas Gerais do Python","text":""},{"location":"Python/#o-que-e-python","title":"O que \u00e9 Python?","text":"<p>Python \u00e9 uma linguagem de programa\u00e7\u00e3o de alto n\u00edvel criada na d\u00e9cada de 90 conhecida por ser uma linguagem eficiente e relativamente f\u00e1cil de aprender. Pode ser utilizada em muitas \u00e1reas diferentes, entre elas desenvolvimento web, an\u00e1lise de dados, automa\u00e7\u00e3o de tarefas, intelig\u00eancia artificial, aprendizado de m\u00e1quina, entre outras.</p>"},{"location":"Python/#quais-sao-as-principais-caracteristicas-pros-e-contras-do-python","title":"Quais s\u00e3o as principais caracter\u00edsticas, pr\u00f3s e contras do Python?","text":""},{"location":"Python/#pros","title":"Pr\u00f3s","text":"<p>Sintaxe: A sintaxe do Python \u00e9 simples, utilizando indenta\u00e7\u00e3o por blocos de c\u00f3digo torna-se mais leg\u00edvel para iniciantes, j\u00e1 que parece mais com a linguagem natural, al\u00e9m disso, torna a manuten\u00e7\u00e3o do c\u00f3digo mais f\u00e1cil. Versatilidade: O python possui aplica\u00e7\u00f5es em v\u00e1rias \u00e1reas diferentes. Quando se aprende Python, existem muitos caminhos que se podem seguir, isso vale desde desenvolvimento web at\u00e9 ci\u00eancia de dados e aprendizado de m\u00e1quina. Al\u00e9m disso, existe uma alta portabilidade no Python, ent\u00e3o um sistema que foi escrito para um sistema operacional pode facilmente ser portado para ser executado em outros sistemas. Comunidade: A linguagem Python possui uma comunidade muito ativa e amig\u00e1vel, ent\u00e3o a solu\u00e7\u00e3o de problemas para quest\u00f5es nessa linguagem se tornam mais f\u00e1ceis de serem resolvidas.  Bibliotecas: Python possui uma grande cole\u00e7\u00e3o de bibliotecas poderosas para diversas finalidades, como numpy, pandas, matplotlib para an\u00e1lise de dados, e TensorFlow, PyTorch para aprendizado de m\u00e1quina e IA. Isso gera uma abstra\u00e7\u00e3o muito grande de c\u00f3digo, muitas coisas j\u00e1 est\u00e3o prontas e basta serem implementadas no seu c\u00f3digo, sem a necessidade de reescrever tudo.</p>"},{"location":"Python/#contras","title":"Contras","text":"<p>Desempenho: Quando se compara a outras linguagens como C++ ou Rust, o Python pode se mais lento que elas, por conta de sua natureza interpretada e tipagem din\u00e2mica, por isso, o Python pode n\u00e3o ser a melhor escolha para aplica\u00e7\u00f5es que requerem tempos de resposta extremamente r\u00e1pidos ou previs\u00edveis. Vers\u00f5es: A transi\u00e7\u00e3o entre vers\u00f5es do Python pode causar problemas por conta de mudan\u00e7as na linguagem e em suas bibliotecas. Al\u00e9m disso, diferentes vers\u00f5es do Python ainda est\u00e3o em uso, o que pode causar problemas de compatibilidade. Seguran\u00e7a: Por ser uma linguagem din\u00e2mica, erros de tipagem podem passar despercebidos at\u00e9 o momento de execu\u00e7\u00e3o, o que pode levar a bugs dif\u00edceis de encontrar. Como ela n\u00e3o obriga a defini\u00e7\u00e3o de tipos, estes erros s\u00f3 ir\u00e3o aparecer quando o programa estiver sendo executado, e n\u00e3o no momento da compila\u00e7\u00e3o como acontece em outras linguagens como o C# por exemplo.</p>"},{"location":"Python/#por-que-usar-python-em-machine-learning","title":"Por que usar Python em Machine Learning?","text":"<p>O Python possui uma ampla disponibilidade de bibliotecas quando se fala em IA e Machine Learning. Esse \u00e9 um dos principais motivos para se utilizar python para esta finalidade, dessa forma fica mais f\u00e1cil a implementa\u00e7\u00e3o de modelos complexos de IA.  Tensorflow \u00e9 a maior plataforma de Machine Learning end-to-end desenvolvida pelo Google, e ela est\u00e1 dispon\u00edvel no Python. Al\u00e9m dela, Pytorch, \u00e9 uma plataforma com a mesma finalidade, desenvolvida pela Meta, tamb\u00e9m est\u00e1 ganhando muita popularidade no Python. Quando uma ampla comunidade faz a aplica\u00e7\u00e3o dessas bibliotecas nestas linguagens, o desenvolvimento nesta \u00e1rea atrav\u00e9s do Python se torna um caminho l\u00f3gico a seguir. Quanto mais gente trabalhando com as mesmas tecnologias, mais f\u00e1cil de achar conte\u00fados relacionados para estudo e solu\u00e7\u00e3o de problemas.</p>"},{"location":"Python/Bibliotecas/Numpy/","title":"Numpy","text":"<p>O NumPy \u00e9 uma biblioteca utilizada na computa\u00e7\u00e3o num\u00e9rica que oferece suporte para realizar opera\u00e7\u00f5es com arrays multidimensionais (ndarray) e usar fun\u00e7\u00f5es matem\u00e1ticas com opera\u00e7\u00f5es r\u00e1pidas para tratamento e limpeza de dados, gera\u00e7\u00e3o de subconjuntos e filtragens, estat\u00edsticas descritivas, manipula\u00e7\u00e3o de dados relacionais, manipula\u00e7\u00f5es de dados em grupos, entre outros tipos de processamento. Al\u00e9m de ocupar menos mem\u00f3ria, as opera\u00e7\u00f5es s\u00e3o mais velozes e tem a facilidade de execu\u00e7\u00e3o de c\u00e1lculos num\u00e9ricos.</p> <pre><code>import numpy as np\n</code></pre>"},{"location":"Python/Bibliotecas/Numpy/#utilizacao-da-biblioteca","title":"Utiliza\u00e7\u00e3o da biblioteca","text":"<ul> <li>Ndarray: \u00e9 uma estrutura b\u00e1sica da biblioteca NumPy e pode ter qualquer n\u00famero de dimens\u00f5es.</li> <li>\u00c9 fundamental conhecer os arrays em python, bem como sua cria\u00e7\u00e3o e funcionamento.</li> </ul> <pre><code># Cria\u00e7\u00e3o do array e convers\u00e3o para um ndarray bidimensional de floats\narray = [[6, 7.5], [8, 15], [27, 1.5]]\nmeuArray = np.array(array)\n</code></pre> <p>Criar um ndarray com determinados valores.</p> <pre><code>arrayZeros = np.zeros((3,3), dtype=int) # Preenchido com zeros\narrayUns = np.ones((3,3), dtype=int) # Preenchido com uns\narrayUnsComo = np.ones_like(arrayUns) # # Preenchido com uns, com base nas dimens\u00f5es do arrayUns\narrayVazio = np.empty((3,3), dtype=int) # Sem estar preenchido, mas ter\u00e1 lixo de mem\u00f3ria\narrayCheioValorEspecifico = np.full((3, 3), 5) # Preenchido com valor espec\u00edfico, no caso 5\nmatriz_identidade = np.eye(3) # Elementos da diagonal principal s\u00e3o iguais a 1 e todos os outros s\u00e3o iguais a 0.\n</code></pre> <p>Inicializa\u00e7\u00e3o dos ndarrays para os pr\u00f3ximos t\u00f3picos</p> <pre><code>ndarray1 = np.array([[1, 2], [3, 4]])\nndarray2 = np.array([[5, 6], [7, 8]])\n</code></pre>"},{"location":"Python/Bibliotecas/Numpy/#operacoes-basicas-estatisticas-e-comparativas","title":"Opera\u00e7\u00f5es B\u00e1sicas, Estat\u00edsticas e Comparativas","text":"<p>Criando opera\u00e7\u00f5es b\u00e1sicas em ndarrays de forma simples.</p> <pre><code>ndarray3 = ndarray1 + ndarray2\nsubtracao = ndarray1 - ndarray2\nmultiplicacao = ndarray1 * ndarray2\ndivisao = ndarray1 / ndarray2\n</code></pre> <p>Similar com a biblioteca pandas, podemos criar opera\u00e7\u00f5es estat\u00edsticas, por\u00e9m com ndarrays.</p> <pre><code>media = np.mean(ndarray3)\nmediana = np.median(ndarray3)\ndesvioPadrao = np.std(ndarray3)\nvariancia = np.var(ndarray3)\nminimo = np.min(ndarray3)\nmaximo = np.max(ndarray3)\n</code></pre> <p>Por fim, temos as opera\u00e7\u00f5es comparativas.</p> <pre><code># Retornam sempre valores booleanos\nndarray3Bool = ndarray3 &lt;= 5 # Percorre o array testando cada n\u00famero\ncomparacaoMaior = ndarray1 &gt; ndarray2\n</code></pre>"},{"location":"Python/Bibliotecas/Numpy/#geracao-de-numeros-aleatorios","title":"Gera\u00e7\u00e3o de N\u00fameros Aleat\u00f3rios","text":"<p>Podemos criar arrays de n\u00fameros aleat\u00f3rios com diferentes distribui\u00e7\u00f5es e caracter\u00edsticas, como n\u00fameros uniformemente distribu\u00eddos entre dois valores espec\u00edficos, n\u00fameros aleat\u00f3rios de uma distribui\u00e7\u00e3o normal (gaussiana), entre outros.</p> <pre><code>aleatorio = np.random.rand(*ndarray3.shape) #  Aleat\u00f3rio entre 0 e 1 com a mesma forma do 'ndarray1'\nnumerosDeterminadosAleatorios = np.random.uniform(0, 10, size=(3, 3)) # N\u00fameros entre 0 e 10\nnumerosAleatorios = np.random.randn(3, 3) # N\u00fameros aleat\u00f3rios\ninteiroAleatorio = np.random.randint(5, 100, size=(3, 3)) # N\u00fameros inteiros entre 5 e 100\namostraAleatoria = np.random.choice(ndarray3.flatten(), size=5)  # Amostra aleat\u00f3ria com 5 elementos do 'ndarray3'\n</code></pre>"},{"location":"Python/Bibliotecas/Numpy/#manipulacao-avancada-e-algebra-linear","title":"Manipula\u00e7\u00e3o Avan\u00e7ada e \u00c1lgebra Linear","text":""},{"location":"Python/Bibliotecas/Numpy/#indexacao-e-slicing","title":"Indexa\u00e7\u00e3o e Slicing","text":"<p>Indexa\u00e7\u00e3o: acesso direto a elementos espec\u00edficos de um array usando seus \u00edndices (posi\u00e7\u00f5es). Existem v\u00e1rios tipos de indexa\u00e7\u00e3o: b\u00e1sica, por lista de \u00edndices, com array de \u00edndices, com passo, e a avan\u00e7ada. Slicing: extra\u00e7\u00e3o de subarrays a partir de um array principal utilizando intervalos de \u00edndices.</p> <pre><code># Indexa\u00e7\u00e3o B\u00e1sica\nelemento = ndarray1[1, 1]  # Acessando o elemento na segunda linha, segunda coluna\nelemento = ndarray3[2, 3]  # Acessando o elemento da terceira linha, terceira coluna\n\n# Indexa\u00e7\u00e3o Avan\u00e7ada\nultimaLinha = array_3x3[-1, :] # Acessando a \u00faltima linha usando \u00edndices negativos\nexcetoPrimeiraColuna = array_3x3[:, 1:] # Acessando todos os elementos exceto a primeira coluna\n\n# Slicing\nlinha = ndarray3[0]  # Acessando a primeira linha inteira\ncoluna = ndarray3[:, 2]  # Acessando a terceira coluna inteira\nsubmatriz = ndarray1[0:2, 0:2] # Acessando uma submatriz\n</code></pre>"},{"location":"Python/Bibliotecas/Numpy/#reshape-e-transposicao","title":"Reshape e Transposi\u00e7\u00e3o","text":"<p>Reshape: altera\u00e7\u00e3o da forma (dimens\u00f5es) de um array sem modificar seus dados. Transposi\u00e7\u00e3o: troca de linhas por colunas em um array, invertendo suas dimens\u00f5es.</p> <pre><code># Reshape\nreshaped = ndarray3.reshape(1, 8) # Mudando a forma do array combinado para 1x8\n\n# Transposi\u00e7\u00e3o\nndarray1Transposto = ndarray1.T\n</code></pre>"},{"location":"Python/Bibliotecas/Numpy/#concatenacao-e-divisao","title":"Concatena\u00e7\u00e3o e Divis\u00e3o","text":"<p>Concatena\u00e7\u00e3o: combina\u00e7\u00e3o de dois ou mais arrays ao longo de um eixo especificado (linha ou coluna). Divis\u00e3o: separa\u00e7\u00e3o de um array em v\u00e1rios subarrays ao longo de um eixo especificado.</p> <pre><code># Concatena\u00e7\u00e3o\nconcatenadoLinhas = np.concatenate((ndarray1, ndarray2), axis=0)\nconcatenadoColunas = np.concatenate((ndarray1, ndarray2), axis=1)\n\n# Divis\u00e3o\ndivididoLinhas = np.split(ndarray3, 2, axis=0)\ndivididoColunas = np.split(ndarray3, 2, axis=1)\n</code></pre>"},{"location":"Python/Bibliotecas/Numpy/#algebra-linear","title":"\u00c1lgebra Linear","text":"<p>Existem diversas fun\u00e7\u00f5es para opera\u00e7\u00f5es de \u00e1lgebra linear, incluindo produto de matrizes, c\u00e1lculo de determinantes, invers\u00e3o de matrizes, decomposi\u00e7\u00f5es, resolu\u00e7\u00e3o de sistemas de equa\u00e7\u00f5es lineares e muito outros.</p> <pre><code>produtoMatricial = np.dot(ndarray1, ndarray2) # Produto matricial\ndeterminante = np.linalg.det(ndarray3) # Determinante\ninversa = np.linalg.inv(ndarray3) # Inversa da matriz\nU, R = np.linalg.qr(ndarray3, mode='r') # Decomposi\u00e7\u00e3o UR\nprint(np.allclose(np.dot(U, R), ndarray3)) # Verificando se est\u00e1 correta (U * R deve ser igual a ndarray3)\n\n# Sistemas de equa\u00e7\u00f5es lineares\n# Coeficientes das equa\u00e7\u00f5es\nA = ndarray1 \nb = ndarray2\n# Resolu\u00e7\u00e3o do sistema de equa\u00e7\u00f5es lineares Ax = b\nx = np.linalg.solve(A, b)\n# Exibindo a solu\u00e7\u00e3o\nprint(\"Solu\u00e7\u00e3o do sistema de equa\u00e7\u00f5es lineares:\")\nprint(x)\n# Verificando se a solu\u00e7\u00e3o est\u00e1 correta (Ax deve ser igual a b)\nprint(\"\\nVerifica\u00e7\u00e3o: Ax = b\")\nprint(np.allclose(np.dot(A, x), b))\n\n#Output\nSolu\u00e7\u00e3o do sistema de equa\u00e7\u00f5es lineares:\n[[-3. -4.]\n [ 4.  5.]]\nVerifica\u00e7\u00e3o: Ax = b\nTrue\n</code></pre>"},{"location":"Python/Bibliotecas/Pandas/","title":"Pandas","text":"<p>O Pandas \u00e9 uma biblioteca em Python projetada para an\u00e1lise e manipula\u00e7\u00e3o de dados tabulares, oferecendo estruturas de dados, sendo as principais o DataFrame e Series. Importando o Pandas em seu ambiente de desenvolvimento favorito, n\u00e3o importa qual seja.</p> <pre><code>import pandas as pd\n</code></pre> <p>Utiliza\u00e7\u00e3o da biblioteca: - Series: \u00e9 uma estrutura unidimensional, tendo apenas um tipo de dado e armazenando dados mais simples e homog\u00eaneos. </p> <pre><code>valores = [10, 25, 40, 75, 50]\nserie = pd.Series(valores)\n</code></pre> <ul> <li>DataFrame: \u00e9 a principal estrutura de dados do Pandas e organiza os dados em uma tabela com linhas e colunas, parecido com uma tabela de banco de dados. </li> </ul> <pre><code># Este DataFrame ser\u00e1 usado para os pr\u00f3ximos t\u00f3picos\nvendas = {\n    'Data': ['2024-05-14', '2024-05-15', '2024-05-16', '2024-05-17', '2024-05-18', '2024-05-19', '2024-05-20'],\n    'Vendas': [150, 220, None, 175, 160, 180, 250],\n    'Produto': ['A', 'B', 'C', 'D', None, 'F', 'G'],\n    'Quantidade': [10, 150, 30, None, 50, 60, 70]\n}\ndf = pd.DataFrame(vendas)\n</code></pre>"},{"location":"Python/Bibliotecas/Pandas/#operacoes-estatisticas","title":"Opera\u00e7\u00f5es estat\u00edsticas","text":"<p>Algumas fun\u00e7\u00f5es b\u00e1sicas da biblioteca permitem opera\u00e7\u00f5es estat\u00edsticas nas estruturas de dados, entre elas:</p> <pre><code># Opera\u00e7\u00f5es baseadas na coluna Vendas\nmedia = df['Vendas'].mean()\nmediana = df['Vendas'].median()\nmoda = df['Vendas'].mode()\ndesvioPadrao = df['Vendas'].std()\nvariancia = df['Vendas'].var()\ncontagem = df['Vendas'].count()\n</code></pre>"},{"location":"Python/Bibliotecas/Pandas/#limpeza-e-preparacao-de-dados","title":"Limpeza e Prepara\u00e7\u00e3o de Dados","text":"<p>Preencher valores ausentes, remover linhas e valores duplicados no DataFrame.</p> <pre><code>df['Vendas'].fillna(160, inplace=True) # Preenche com o valor 160\ndf.dropna(subset=['Produto', 'Quantidade'], inplace=True) # Remove linha com valor ausente nas colunas espec\u00edficas\ndf.drop_duplicates(inplace=True) # Remove valores duplicados\n</code></pre> <p>Converter a coluna 'Data' para um datetime.</p> <pre><code>df['Data'] = pd.to_datetime(df['Data'])\n</code></pre> <p>Tamb\u00e9m podemos detectar, tratar e/ou excluir outliers.  Neste exemplo, foi usada a t\u00e9cnica do IQR (Intervalo Interquartil) para a coluna 'Quantidade'.</p> <pre><code># Calcular os quartis Q1 e Q3 para achar o IQR\nQ1 = df['Quantidade'].quantile(0.25)\nQ3 = df['Quantidade'].quantile(0.75)\nIQR = Q3 - Q1\n\nlimiteInferior = Q1 - 1.5 * IQR\nlimiteSuperior = Q3 + 1.5 * IQR\n\n# Remover outliers\ndf = df[(df['Quantidade'] &gt;= limiteInferior) &amp; (df['Quantidade'] &lt;= limiteSuperior)]\n</code></pre> <p>Com a limpeza e prepara\u00e7\u00e3o realizada, o DataFrame ficou assim:</p> <pre><code>print(df)\n# Output\n        Data  Vendas Produto  Quantidade\n0 2024-05-14   150.0       A        10.0\n2 2024-05-16   160.0       C        30.0\n5 2024-05-19   180.0       F        60.0\n6 2024-05-20   250.0       G        70.0\n</code></pre>"},{"location":"Python/Bibliotecas/Pandas/#leitura-e-escrita-de-dados","title":"Leitura e Escrita de Dados","text":"<p>A biblioteca tem recursos para ler e escrever em dezenas de formatos diferentes, entre eles: CSV, Excel, JSON, SQL, HTML, HDF5, Parquet e muitos outros formatos.</p> <pre><code># Escrita do DataFrame do exemplo anterior para o arquivo 'vendas.xlsx', suportado pelo Excel\ndf.to_excel('vendas.xlsx', index=False)\n# Leitura dos dados do arquivo 'vendas.xlsx'\ndfExcel = pd.read_excel('vendas.xlsx')\n</code></pre>"},{"location":"Python/Bibliotecas/Pandas/#analise-exploratoria-e-visualizacao-de-dados","title":"An\u00e1lise explorat\u00f3ria e visualiza\u00e7\u00e3o de dados","text":"<p>Mostrar as primeiras, \u00faltimas e determinadas linhas do DataFrame.</p> <pre><code>print(df.head(2)) # Primeiras duas linhas\nprint(df.tail(2)) # \u00daltimas duas linhas\nprint(df.loc[[0, 5], ['Produto', 'Vendas']]) # Linha 0 e Linha 5 das colunas espec\u00edficas\n</code></pre> <p>Mostrar estat\u00edsticas descritivas das colunas num\u00e9ricas.</p> <pre><code>print(df.describe().round(2)) # Valores com apenas duas casas ap\u00f3s a v\u00edrgula\n\n#Output\n                      Data  Vendas  Quantidade\ncount                    4    4.00        4.00\nmean   2024-05-17 06:00:00  185.00       42.50\nmin    2024-05-14 00:00:00  150.00       10.00\n25%    2024-05-15 12:00:00  157.50       25.00\n50%    2024-05-17 12:00:00  170.00       45.00\n75%    2024-05-19 06:00:00  197.50       62.50\nmax    2024-05-20 00:00:00  250.00       70.00\nstd                    NaN   45.09       27.54\n</code></pre> <p>Vis\u00e3o geral do DataFrame.</p> <pre><code>print(df.info()) \n\n#Output \n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 4 entries, 0 to 6\nData columns (total 4 columns):\n #   Column      Non-Null Count  Dtype\n---  ------      --------------  -----\n 0   Data        4 non-null      datetime64[ns]\n 1   Vendas      4 non-null      float64\n 2   Produto     4 non-null      object\n 3   Quantidade  4 non-null      float64\ndtypes: datetime64[ns](1), float64(2), object(1)\nmemory usage: 160.0+ bytes\nNone\n</code></pre> <p>Agregar dados de uma ou mais colunas.</p> <pre><code>print(df.agg({'Vendas': 'sum', 'Quantidade': 'sum'}))\n\n#Output\nVendas        740.0\nQuantidade    170.0\ndtype: float64\n</code></pre>"},{"location":"Python/Bibliotecas/Pandas/#conclusao","title":"Conclus\u00e3o","text":"<p>Ao importar o Pandas em qualquer ambiente de desenvolvimento Python, voc\u00ea ganha acesso a uma ampla gama de funcionalidades para trabalhar com dados de forma r\u00e1pida e eficaz. Al\u00e9m das opera\u00e7\u00f5es b\u00e1sicas de cria\u00e7\u00e3o e manipula\u00e7\u00e3o de dados, como a cria\u00e7\u00e3o de Series e DataFrames, o Pandas oferece uma variedade de fun\u00e7\u00f5es para an\u00e1lise estat\u00edstica, limpeza e prepara\u00e7\u00e3o de dados, leitura e escrita de dados em diferentes formatos, e an\u00e1lise explorat\u00f3ria e visualiza\u00e7\u00e3o de dados.</p> <p>Outras fun\u00e7\u00f5es \u00fateis do Pandas incluem: - Filtragem de dados: para selecionar dados com base em condi\u00e7\u00f5es espec\u00edficas. - Ordena\u00e7\u00e3o de dados: para ordenar os dados com base em uma ou mais colunas. - Opera\u00e7\u00f5es de combina\u00e7\u00e3o de dados: para combinar dados de diferentes fontes usando opera\u00e7\u00f5es como merge e join. - Transforma\u00e7\u00e3o de dados: para aplicar fun\u00e7\u00f5es de transforma\u00e7\u00e3o aos dados, como mapeamento, aplica\u00e7\u00e3o de fun\u00e7\u00f5es element-wise e aplica\u00e7\u00e3o de fun\u00e7\u00f5es de agrega\u00e7\u00e3o.</p>"},{"location":"Python/Bibliotecas/Scipy/","title":"SciPy","text":"<p>SciPy \u00e9 uma biblioteca fundamental para a computa\u00e7\u00e3o cient\u00edfica, constru\u00edda sobre a base s\u00f3lida do NumPy, oferecendo uma amplas funcionalidades para resolver problemas matem\u00e1ticos, cient\u00edficos e de engenharia. Enquanto NumPy \u00e9 excelente para manipula\u00e7\u00e3o e opera\u00e7\u00f5es em arrays multidimensionais, SciPy expande essas capacidades com fun\u00e7\u00f5es adicionais para \u00e1lgebra linear, otimiza\u00e7\u00e3o, integra\u00e7\u00e3o, interpola\u00e7\u00e3o, an\u00e1lise de Fourier, processamento de sinais, estat\u00edsticas e muito mais.</p> <pre><code>import numpy as np\n# Recomenda-se importar apenas os subm\u00f3dulos necess\u00e1rios para economizar mem\u00f3ria e acelerar o script.\nfrom scipy import stats, linalg, optimize\n</code></pre> <p>Utiliza\u00e7\u00e3o da biblioteca: - \u00c9 fundamental ter conhecimento da biblioteca numpy, suas fun\u00e7\u00f5es e resolu\u00e7\u00f5es.</p> <p>Por que usar a biblioteca SciPy ao inv\u00e9s da NumPy? - Funcionalidades avan\u00e7adas de \u00e1lgebra linear, enquanto a NumPy fornece fun\u00e7\u00f5es mais b\u00e1sicas. - Mais robusta e abrangente se comparada com a NumPy, que \u00e9 mais r\u00e1pida para opera\u00e7\u00f5es simples. - Cont\u00e9m otimiza\u00e7\u00f5es para certos c\u00e1lculos que podem serem lentos ou inexistentes na NumPy.</p>"},{"location":"Python/Bibliotecas/Scipy/#distribuicao-estatisticas","title":"Distribui\u00e7\u00e3o Estat\u00edsticas","text":"<p>Assim como o NumPy, o SciPy oferece suporte para v\u00e1rias distribui\u00e7\u00f5es estat\u00edsticas, mas com funcionalidades extras.</p> <pre><code># Distribui\u00e7\u00e3o Normal\n# Cria\u00e7\u00e3o de uma vari\u00e1vel aleat\u00f3ria normalmente distribu\u00edda\nrvNormal = stats.norm(loc=0, scale=1)  # M\u00e9dia = 0, Desvio padr\u00e3o = 1\naleatoriosNormal = rvNormal.rvs(size=100)  # Gera 100 n\u00fameros aleat\u00f3rios\nmediaNormal = rvNormal.mean()  # M\u00e9dia da distribui\u00e7\u00e3o\nvarianciaNormal = rvNormal.var()  # Vari\u00e2ncia da distribui\u00e7\u00e3o\n</code></pre>"},{"location":"Python/Bibliotecas/Scipy/#testes-estatisticos","title":"Testes Estat\u00edsticos","text":"<p>A biblioteca ornece uma amplos testes estat\u00edsticos para diferentes prop\u00f3sitos.</p> <pre><code># Teste t de Student\n# Verifica se h\u00e1 diferen\u00e7a significativa entre as m\u00e9dias de duas amostras independentes\namostra1 = np.random.normal(loc=0, scale=1, size=100)\namostra2 = np.random.normal(loc=0.5, scale=1, size=100)\ntStatistic, pValue = stats.ttest_ind(amostra1, amostra2)\n\n# Teste qui-quadrado\n# Testa a independ\u00eancia entre vari\u00e1veis categ\u00f3ricas em uma tabela de conting\u00eancia\ntabelaContingencia = np.array([[10, 20, 30], [6,  9,  17]])\nchi2Statistic, pValue, degreesOfFreedom, expected = stats.chi2_contingency(tabelaContingencia)\n</code></pre>"},{"location":"Python/Bibliotecas/Scipy/#algebra-linear-avancada","title":"\u00c1lgebra Linear Avan\u00e7ada","text":"<pre><code># Decomposi\u00e7\u00e3o de Valores Singulares (SVD)\nmatriz = np.random.random((3, 3))\nU, S, V = linalg.svd(matriz)\n\n# Autovalores e Autovetores\nautovalores, autovetores = linalg.eig(matriz)\n\n# Resolu\u00e7\u00e3o de Equa\u00e7\u00f5es Lineares Esparsas\nmatrizEsparsa = np.array([[1, 0, 0], [0, 0, 2], [0, 0, 0]])\nb = np.array([1, 0, -1])\nx = linalg.spsolve(matrizEsparsa, b)\n</code></pre>"},{"location":"Python/Bibliotecas/Scipy/#otimizacao-e-ajuste-de-curvas","title":"Otimiza\u00e7\u00e3o e Ajuste de Curvas","text":"<p>Op\u00e7\u00f5es para otimiza\u00e7\u00e3o num\u00e9rica e ajuste de curvas.</p> <pre><code># Otimiza\u00e7\u00e3o de Fun\u00e7\u00f5es\ndef func(x):\n    return x**2 + 10*np.sin(x)\n\notimizacao = optimize.minimize(func, x0=0)\n\n# Ajuste de Curvas\nx = np.linspace(0, 10, 100)\ny = func(x) + np.random.normal(size=x.size)\nparametros, covariancia = optimize.curve_fit(func, x, y)\n</code></pre>"},{"location":"Python/Bibliotecas/Seaborn/","title":"Seaborn","text":"<p>Seaborn \u00e9 uma biblioteca de visualiza\u00e7\u00e3o de dados, constru\u00edda sobre o matplotlib, que simplifica a cria\u00e7\u00e3o de gr\u00e1ficos estat\u00edsticos complexos. Muito utilizada para an\u00e1lise explorat\u00f3ria de dados e comunica\u00e7\u00e3o de resultados.</p> <pre><code>import seaborn as sb\n# Para os pr\u00f3ximos t\u00f3picos teremos que usar essas outras bibliotecas tamb\u00e9m: \nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n</code></pre> <p>Utiliza\u00e7\u00e3o da biblioteca: - Existem 3 tipos principais de gr\u00e1ficos: relacionais, de distribui\u00e7\u00e3o e de categorias. - Ter conhecimento sobre os gr\u00e1ficos e a melhor maneira de usar cada um deles.</p> <p>DataFrame de exemplo para os gr\u00e1ficos.</p> <pre><code>pessoa = {\n    'idade': np.random.randint(18, 70, 100),\n    'genero': np.random.choice(['Masculino', 'Feminino'], 100),\n    'altura': np.random.normal(loc=170, scale=10, size=100),\n    'peso': np.random.normal(loc=70, scale=15, size=100),\n    'pontuacao': np.random.randint(1, 101, 100)\n}\ndf = pd.DataFrame(pessoa)\n</code></pre> <p>Controlando o estilo global dos gr\u00e1ficos.</p> <pre><code># Entre eles: darkgrid, whitegrid, dark, white, ticks\nsns.set_style(\"whitegrid\")\n</code></pre> <p>Controlando a escala da fonte.</p> <pre><code># Entre elas: paper, notebook, talk, poster\nsns.set_context(\"notebook\")\n</code></pre> <p>Para facilitar a exibi\u00e7\u00e3o dos gr\u00e1ficos, criamos essas tr\u00eas vari\u00e1veis \u00fateis:</p> <pre><code># Agrupando as idades em faixas\nfaixasEtarias = pd.cut(df['idade'], bins=[18, 25, 35, 45, 55, 65, 75])\n\n# Contando quantas pessoas est\u00e3o em cada faixa et\u00e1ria\ncontagemFaixaEtaria = df.groupby(faixasEtarias).size().reset_index(name='contagem')\n\n# Calculando a m\u00e9dia da pontua\u00e7\u00e3o no teste por faixa et\u00e1ria\nmediaPontuacaoPorFaixa = df.groupby(faixasEtarias)['pontuacao'].mean()\n</code></pre>"},{"location":"Python/Bibliotecas/Seaborn/#graficos-relacionais","title":"Gr\u00e1ficos Relacionais","text":""},{"location":"Python/Bibliotecas/Seaborn/#lineplot","title":"Lineplot","text":"<pre><code># Criando o lineplot para ver a rela\u00e7\u00e3o da nota por faixa et\u00e1ria\nplt.figure(figsize=(10, 6))\nsns.lineplot(x=range(len(mediaPontuacaoPorFaixa)), y=mediaPontuacaoPorFaixa.values, marker='o', color='red', linestyle='-')\nplt.xlabel('Faixa Et\u00e1ria')\nplt.ylabel('M\u00e9dia de Pontua\u00e7\u00e3o no Teste')\nplt.title('Rela\u00e7\u00e3o da Pontua\u00e7\u00e3o M\u00e9dia no Teste por Faixa Et\u00e1ria')\nplt.xticks(range(len(mediaPontuacaoPorFaixa)), mediaPontuacaoPorFaixa.index, rotation=45)\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"Python/Bibliotecas/Seaborn/#scatterplot","title":"Scatterplot","text":"<pre><code># Criando o scatterplot para ver a rela\u00e7\u00e3o entre altura e peso\nplt.figure(figsize=(8, 6))\nsns.scatterplot(x='altura', y='peso', data=df)\nplt.xlabel('Altura (cm)')\nplt.ylabel('Peso (kg)')\nplt.title('Rela\u00e7\u00e3o entre Altura e Peso')\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"Python/Bibliotecas/Seaborn/#graficos-de-distribuicao","title":"Gr\u00e1ficos de Distribui\u00e7\u00e3o","text":""},{"location":"Python/Bibliotecas/Seaborn/#histplot","title":"Histplot","text":"<pre><code># Criando o histplot para ver a distribui\u00e7\u00e3o de idades\nplt.figure(figsize=(8, 6))\nsns.histplot(df['idade'], bins=20, kde=True, color='skyblue')\nplt.xlabel('Idade')\nplt.ylabel('Contagem')\nplt.title('Distribui\u00e7\u00e3o da Idade das Pessoas')\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"Python/Bibliotecas/Seaborn/#kdeplot","title":"Kdeplot","text":"<pre><code># Criando o kdeplot para ver a distribui\u00e7\u00e3o de altura por g\u00eanero\ncores = {'Masculino': 'orange', 'Feminino': 'blue'}\nplt.figure(figsize=(8, 6))\nfor genero, cor in cores.items():\n    sns.kdeplot(data=df[df['genero'] == genero], x='altura', fill=True, alpha=0.5, color=cor, label=genero)\nplt.xlabel('Altura (cm)')\nplt.ylabel('Densidade')\nplt.title('Distribui\u00e7\u00e3o da Altura por G\u00eanero')\nplt.grid(True)\nplt.legend(title='G\u00eanero', loc='upper right')\nplt.show()\n</code></pre>"},{"location":"Python/Bibliotecas/Seaborn/#graficos-de-categorias","title":"Gr\u00e1ficos de Categorias","text":""},{"location":"Python/Bibliotecas/Seaborn/#stripplot","title":"Stripplot","text":"<pre><code># Criando o stripplot para ver a altura por g\u00eanero e faixa et\u00e1ria\nplt.figure(figsize=(12, 6))\nsns.stripplot(x='genero', y='altura', hue=faixasEtarias, data=df, jitter=True)\nplt.xlabel('G\u00eanero')\nplt.ylabel('Altura (cm)')\nplt.title('Altura por G\u00eanero e Faixa Et\u00e1ria')\nplt.legend(title='Faixa Et\u00e1ria', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"Python/Bibliotecas/Seaborn/#barplot","title":"Barplot","text":"<pre><code># Criando o barplot para ver quantidade de pessoas por faixa et\u00e1ria\nplt.figure(figsize=(10, 6))\nax = sns.barplot(x='contagem', y='idade', data=contagemFaixaEtaria, orient='h')\nplt.xlabel('N\u00famero de Pessoas')\nplt.ylabel('Faixa Et\u00e1ria')\nplt.title('Contagem de Pessoas por Faixa Et\u00e1ria')\nplt.show()\n</code></pre>"},{"location":"Python/Bibliotecas/Seaborn/#boxplot","title":"Boxplot","text":"<pre><code># Criando o boxplot para ver o peso por faixa et\u00e1ria\nplt.figure(figsize=(10, 6))\nsns.boxplot(x=faixasEtarias, y='peso', data=df)\nplt.xlabel('Faixa Et\u00e1ria')\nplt.ylabel('Peso')\nplt.title('Distribui\u00e7\u00e3o do Peso por Faixa Et\u00e1ria')\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"Python/Bibliotecas/Seaborn/#violinplot","title":"Violinplot","text":"<pre><code># Criando o violinplot para ver a altura por faixa et\u00e1ria\nplt.figure(figsize=(10, 6))\nsns.violinplot(x=faixasEtarias, y='altura', data=df)\nplt.xlabel('Faixa Et\u00e1ria')\nplt.ylabel('Altura')\nplt.title('Distribui\u00e7\u00e3o da Altura por Faixa Et\u00e1ria')\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"Python/Bibliotecas/Sklearn/","title":"Sklearn","text":"<p>O Scikit-learn \u00e9 uma biblioteca projetada para aprendizado de m\u00e1quina e minera\u00e7\u00e3o de dados, oferecendo ferramentas para modelagem preditiva e an\u00e1lise estat\u00edstica.</p> <pre><code>import sklearn\n</code></pre> <p>Utiliza\u00e7\u00e3o da biblioteca: A Aprendizagem de m\u00e1quina \u00e9 dividida em duas categorias principais(Aprendizado Supervisionado e N\u00e3o-Supervisionado) com cinco subcategorias totais: - Classifica\u00e7\u00e3o. - Regress\u00e3o - Clusteriza\u00e7\u00e3o - Associa\u00e7\u00e3o (sklearn n\u00e3o tem algoritmos de associa\u00e7\u00e3o, apenas a biblioteca mlxtend) - Sumariza\u00e7\u00e3o</p>"},{"location":"Python/Bibliotecas/Sklearn/#aprendizado-supervisionado","title":"Aprendizado Supervisionado","text":"<p>Classifica\u00e7\u00e3o: ferramentas para classifica\u00e7\u00e3o de dados, como SVM, KNN, \u00e1rvores de decis\u00e3o, etc...</p> <pre><code># Exemplo com KNN\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Carregar o conjunto de dados Iris\niris = load_iris()\nX = iris.data\ny = iris.target\n\n# Dividir o conjunto de dados em conjuntos de treino e teste\nX_treino, X_teste, y_treino, y_teste = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Treinar o modelo\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_treino, y_treino)\n\n# Previs\u00f5es\nprevisoes = knn.predict(X_teste)\n</code></pre> <p>Regress\u00e3o: ferramentas para regress\u00e3o, como regress\u00e3o linear, regress\u00e3o de Ridge, regress\u00e3o de Lasso, etc...</p> <pre><code># Exemplo com Regress\u00e3o Linear\nfrom sklearn.linear_model import LinearRegression\n\n# Dados de exemplo\nX = [[1], [2], [3], [4], [5]]\ny = [1.2, 2.3, 3.1, 3.9, 5.1]\n\n# Treinar o modelo\nmodelo = LinearRegression()\nmodelo.fit(X, y)\n\n# Previs\u00f5es\nprevisoes = modelo.predict([[6]])\n</code></pre>"},{"location":"Python/Bibliotecas/Sklearn/#aprendizado-nao-supervisionado","title":"Aprendizado N\u00e3o-Supervisionado","text":"<p>Clusteriza\u00e7\u00e3o: ferramentas para clusteriza\u00e7\u00e3o de dados, como K-means, DBSCAN, e clustering hier\u00e1rquico.</p> <pre><code># Exemplo com K-Means\nfrom sklearn.cluster import KMeans\nimport numpy as np\n\n# Dados de exemplo\nX = np.array([[1, 2], [1, 4], [1, 0],\n              [10, 2], [10, 4], [10, 0]])\n\n# Treinar o modelo\nkmeans = KMeans(n_clusters=2, random_state=0)\nkmeans.fit(X)\n\n# Previs\u00f5es\nrotulos = kmeans.predict([[0, 0], [12, 3]])\ncentroides = kmeans.cluster_centers_\n</code></pre> <p>Sumariza\u00e7\u00e3o: Ferramentas para reduzir a dimensionalidade dos dados e extrair caracter\u00edsticas importantes, como PCA e SVD.</p> <pre><code># Exemplo com PCA\nfrom sklearn.decomposition import PCA\nimport numpy as np\n\n# Dados de exemplo\nX = np.array([[2.5, 2.4], [0.5, 0.7], [2.2, 2.9],\n              [1.9, 2.2], [3.1, 3.0], [2.3, 2.7],\n              [2, 1.6], [1, 1.1], [1.5, 1.6], [1.1, 0.9]])\n\n# Treinar o modelo\npca = PCA(n_components=1)\ncomponentes_principais = pca.fit_transform(X)\n\n# Resultados\nvariancia_explicada = pca.explained_variance_ratio_\n</code></pre>"},{"location":"Python/Bibliotecas/Sklearn/#pre-processamento-de-dados","title":"Pr\u00e9-processamento de Dados","text":""},{"location":"Python/Bibliotecas/Sklearn/#normalizacao-e-padronizacao","title":"Normaliza\u00e7\u00e3o e Padroniza\u00e7\u00e3o","text":"<p>A normaliza\u00e7\u00e3o e padroniza\u00e7\u00e3o ajustam os valores dos dados para ficarem em uma escala comum, o que \u00e9 importante para muitos algoritmos de machine learning.</p> <pre><code>from sklearn.preprocessing import StandardScaler, MinMaxScaler\nimport numpy as np\n\ndados = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n\n# Padroniza\u00e7\u00e3o (z-score)\npadronizador = StandardScaler()\ndadosPadronizados = padronizador.fit_transform(dados)\nprint(dadosPadronizados)\n\n# Normaliza\u00e7\u00e3o (min-max)\nnormalizador = MinMaxScaler()\ndadosNormalizados = normalizador.fit_transform(dados)\nprint(dadosNormalizados)\n</code></pre>"},{"location":"Python/Bibliotecas/Sklearn/#transformacao-de-recursos","title":"Transforma\u00e7\u00e3o de Recursos","text":"<p>A transforma\u00e7\u00e3o de recursos modifica os dados para melhor adapt\u00e1-los aos algoritmos de machine learning, como a cria\u00e7\u00e3o de novas features polinomiais ou codifica\u00e7\u00e3o one-hot.</p> <pre><code>from sklearn.preprocessing import PolynomialFeatures, OneHotEncoder\nimport numpy as np\n\n# Dados para transforma\u00e7\u00e3o polinomial\ndados = np.array([[2, 3], [3, 4], [4, 5]])\n\n# Transforma\u00e7\u00e3o polinomial de grau 2\ntransformadorPolinomial = PolynomialFeatures(degree=2)\ndadosPolinomiais = transformadorPolinomial.fit_transform(dados)\nprint(dadosPolinomiais)\n\n# Dados para one-hot encoding\ncategorias = np.array([['A'], ['B'], ['C'], ['A']])\n\n# One-hot encoding\ncodificador = OneHotEncoder(sparse=False)\ncategoriasCodificadas = codificador.fit_transform(categorias)\nprint(categoriasCodificadas)\n</code></pre>"},{"location":"Python/Bibliotecas/Sklearn/#selecao-de-modelo","title":"Sele\u00e7\u00e3o de Modelo","text":""},{"location":"Python/Bibliotecas/Sklearn/#validacao-cruzada","title":"Valida\u00e7\u00e3o Cruzada","text":"<p>A valida\u00e7\u00e3o cruzada \u00e9 uma t\u00e9cnica para avaliar a performance de um modelo, dividindo os dados em m\u00faltiplas partes e treinando o modelo em diferentes subconjuntos dos dados.</p> <pre><code>from sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import load_iris\n\n# Carregar dados\niris = load_iris()\ndados, rotulos = iris.data, iris.target\n\n# Valida\u00e7\u00e3o cruzada com KFold\nkf = KFold(n_splits=5)\nmodelo = LogisticRegression(max_iter=200)\npontuacoes = cross_val_score(modelo, dados, rotulos, cv=kf)\nprint(pontuacoes)\n</code></pre>"},{"location":"Python/Bibliotecas/Sklearn/#busca-de-hiperparametros","title":"Busca de Hiperpar\u00e2metros","text":"<p>A busca de hiperpar\u00e2metros ajusta os par\u00e2metros de um modelo para encontrar a melhor combina\u00e7\u00e3o usando t\u00e9cnicas como a busca em grade.</p> <pre><code>from sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn.datasets import load_iris\n\n# Carregar dados\niris = load_iris()\ndados, rotulos = iris.data, iris.target\n\n# Definir par\u00e2metros para a busca\nparametros = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\n\n# Realizar a busca\nmodelo = SVC()\nbuscaEmGrade = GridSearchCV(modelo, parametros, cv=5)\nbuscaEmGrade.fit(dados, rotulos)\nprint(buscaEmGrade.best_params_)\n</code></pre>"},{"location":"Python/Bibliotecas/Sklearn/#conjunto-de-dados","title":"Conjunto de Dados","text":""},{"location":"Python/Bibliotecas/Sklearn/#datasets-incorporados","title":"Datasets Incorporados","text":"<p>A biblioteca inclui v\u00e1rios conjuntos de dados reais e sint\u00e9ticos para testar e experimentar diferentes algoritmos de aprendizagem de m\u00e1quina.</p> <pre><code>from sklearn.datasets import load_iris, load_digits\n\n# Carregar conjunto de dados Iris\niris = load_iris()\nprint(iris.data.shape)\n\n# Carregar conjunto de dados Digits\ndigitos = load_digits()\nprint(digitos.data.shape)\n</code></pre>"},{"location":"Python/Bibliotecas/Sklearn/#geradores-de-dados-sinteticos","title":"Geradores de Dados Sint\u00e9ticos","text":"<p>Os geradores de dados sint\u00e9ticos criam conjuntos de dados artificiais que podem ser usados para testar algoritmos de machine learning.</p> <pre><code>from sklearn.datasets import make_classification, make_regression\n\n# Gerar dados de classifica\u00e7\u00e3o\ndadosClassificacao, rotulosClassificacao = make_classification(n_samples=100, n_features=5)\nprint(dadosClassificacao.shape, rotulosClassificacao.shape)\n\n# Gerar dados de regress\u00e3o\ndadosRegressao, rotulosRegressao = make_regression(n_samples=100, n_features=5)\nprint(dadosRegressao.shape, rotulosRegressao.shape)\n</code></pre>"},{"location":"Python/Bibliotecas/Sklearn/#pipelines","title":"Pipelines","text":"<p>Os pipelines permitem a combina\u00e7\u00e3o de v\u00e1rios passos de pr\u00e9-processamento e modelagem em uma \u00fanica sequ\u00eancia, facilitando a manuten\u00e7\u00e3o e a replicabilidade dos experimentos.</p> <pre><code>from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\n\n# Carregar dados\niris = load_iris()\ndados, rotulos = iris.data, iris.target\n\n# Dividir os dados em treino e teste\ndadosTreino, dadosTeste, rotulosTreino, rotulosTeste = train_test_split(dados, rotulos, test_size=0.2, random_state=42)\n\n# Criar um pipeline\npipeline = Pipeline([\n    ('padronizador', StandardScaler()),\n    ('svm', SVC())\n])\n\n# Treinar o pipeline\npipeline.fit(dadosTreino, rotulosTreino)\n\n# Fazer previs\u00f5es\nprevisoes = pipeline.predict(dadosTeste)\nprint(previsoes)\n</code></pre>"},{"location":"Python/Bibliotecas/Sklearn/#metricas-de-avaliacao","title":"M\u00e9tricas de Avalia\u00e7\u00e3o","text":"<ul> <li>Classifica\u00e7\u00e3o: Acur\u00e1cia, Precis\u00e3o, Recall e F1-Score.</li> <li>Regress\u00e3o: Erro Quadr\u00e1tico M\u00e9dio e Coeficiente de Determina\u00e7\u00e3o.</li> <li>Clusteriza\u00e7\u00e3o: Coeficiente de Silhueta e \u00cdndice de Davies-Bouldin</li> <li>Sumariza\u00e7\u00e3o: In\u00e9rcia e Varia\u00e7\u00e3o Explicada</li> </ul>"},{"location":"Python/Bibliotecas/Sklearn/#analise-de-modelos","title":"An\u00e1lise de Modelos","text":""},{"location":"Python/Bibliotecas/Sklearn/#validacao-e-ajuste-de-modelos","title":"Valida\u00e7\u00e3o e Ajuste de Modelos","text":"<p>A valida\u00e7\u00e3o e ajuste de modelos permitem verificar a performance de um modelo para diferentes valores de hiperpar\u00e2metros, ajudando a evitar overfitting.</p> <pre><code>from sklearn.model_selection import validation_curve\nfrom sklearn.datasets import load_iris\nfrom sklearn.svm import SVC\nimport numpy as np\n\n# Carregar dados\niris = load_iris()\ndados, rotulos = iris.data, iris.target\n\n# Validar curva de complexidade do modelo\nparametrosIntervalo = np.logspace(-6, -1, 5)\npontuacoesTreino, pontuacoesTeste = validation_curve(SVC(), dados, rotulos, param_name=\"gamma\", param_range=parametrosIntervalo, cv=5)\n\nprint(pontuacoesTreino)\nprint(pontuacoesTeste)\n</code></pre>"},{"location":"Python/Bibliotecas/Sklearn/#curvas-de-aprendizado-e-validacao","title":"Curvas de Aprendizado e Valida\u00e7\u00e3o","text":"<p>As curvas de aprendizado ajudam a entender a performance de um modelo com diferentes tamanhos de conjunto de treinamento, indicando se o modelo sofre de high bias ou high variance.</p> <pre><code>from sklearn.model_selection import learning_curve\nfrom sklearn.datasets import load_iris\nfrom sklearn.ensemble import RandomForestClassifier\nimport matplotlib.pyplot as plt\nimport numpy as np\n</code></pre>"},{"location":"Python/Estruturas%20da%20Linguagem/","title":"Estruturas da Linguagem","text":""},{"location":"Python/Estruturas%20da%20Linguagem/#variaveis","title":"Vari\u00e1veis","text":"<p>Vari\u00e1veis em Python s\u00e3o usadas para armazenar valores que podem ser manipulados e referenciados ao longo do c\u00f3digo.</p> <p>As vari\u00e1veis em Python s\u00e3o dinamicamente tipadas, o que significa que voc\u00ea n\u00e3o precisa declarar o tipo da vari\u00e1vel explicitamente.  O tipo \u00e9 determinado automaticamente com base no valor atribu\u00eddo. Voc\u00ea declara uma vari\u00e1vel simplesmente atribuindo um valor a um nome de vari\u00e1vel usando o operador '='.</p> <p>Exemplo:</p> <pre><code>x = 10          # Inteiro\nnome = \"Alice\"  # String\npi = 3.14159    # Float (ponto flutuante)\nflag = True     # Booleano\n</code></pre> <p>Voc\u00ea pode usar a fun\u00e7\u00e3o type() para verificar o tipo de uma vari\u00e1vel:</p> <pre><code>print(type(x))    # &lt;class 'int'&gt;\nprint(type(nome)) # &lt;class 'str'&gt;\nprint(type(flag)) # &lt;class 'bool'&gt;\n</code></pre> <p>Os nomes das vari\u00e1veis devem seguir certas regras:</p> <p>--Devem come\u00e7ar com uma letra (a-z, A-Z) ou um sublinhado (_). --Podem conter letras, d\u00edgitos (0-9) e sublinhados. --N\u00e3o podem come\u00e7ar com um d\u00edgito. --S\u00e3o sens\u00edveis a mai\u00fasculas e min\u00fasculas ('nome' e 'Nome' s\u00e3o vari\u00e1veis diferentes).</p>"},{"location":"Python/Estruturas%20da%20Linguagem/#vetores-e-listas","title":"Vetores e Listas","text":"<p>Em Python, vetores s\u00e3o geralmente implementados usando listas. Uma lista \u00e9 uma cole\u00e7\u00e3o ordenada e mut\u00e1vel que pode conter elementos de diferentes tipos, incluindo outros objetos e estruturas de dados.</p> <p>Voc\u00ea pode criar uma lista simplesmente colocando uma s\u00e9rie de elementos entre colchetes [], separados por v\u00edrgulas:</p> <pre><code>--Lista de inteiros\nnumeros = [1, 2, 3, 4, 5]\n\n--Lista de strings\nnomes = [\"Joao\", \"Pedro\", \"Maria\"]\n\n--Lista mista\nmista = [2, \"TESTE\", 123.32, True]\n</code></pre> <p>Os elementos de uma lista podem ser acessados usando \u00edndices. Os \u00edndices come\u00e7am em 0 para o primeiro elemento:</p> <pre><code>numeros = [10, 20, 30, 40, 50]\n\nprint(numeros[0])  # Sa\u00edda: 10\nprint(numeros[2])  # Sa\u00edda: 30\n</code></pre> <p>Voc\u00ea pode adicionar e remover elementos de uma lista usando m\u00e9todos como append(), insert(), remove(), e pop().</p> <pre><code>numeros = [10, 20, 30]\n\nnumeros.append(40)\nprint(numeros)  # Sa\u00edda: [10, 20, 30, 40]\n\nnumeros.remove(30)\nprint(numeros)  # Sa\u00edda: [10, 20, 40]\n\nultimo = numeros.pop()\nprint(ultimo)   # Sa\u00edda: 40\nprint(numeros)  # Sa\u00edda: [10, 20]\n\nprimeiro = numeros.pop(0)\nprint(primeiro)  # Sa\u00edda: 10\nprint(numeros)  # Sa\u00edda: [20]\n</code></pre> <p>Use a fun\u00e7\u00e3o len() para obter o n\u00famero de elementos em uma lista:</p> <pre><code>numeros = [10, 20, 30, 40, 50]\nprint(len(numeros))  # Sa\u00edda: 5\n</code></pre> <p>Voc\u00ea pode iterar sobre os elementos de uma lista usando um loop for:</p> <pre><code>numeros = [10, 20, 30, 40, 50]\n\nfor num in numeros:\n    print(num)\n</code></pre>"},{"location":"Python/Estruturas%20da%20Linguagem/#dicionario","title":"Dicion\u00e1rio","text":"<p>Dicion\u00e1rios em Python s\u00e3o cole\u00e7\u00f5es de pares chave-valor, onde cada chave \u00e9 \u00fanica dentro do dicion\u00e1rio. Eles s\u00e3o mut\u00e1veis, o que significa que podem ser modificados ap\u00f3s a cria\u00e7\u00e3o, e s\u00e3o frequentemente usados para armazenar dados associados ou para representar objetos complexos.</p> <p>Voc\u00ea pode criar um dicion\u00e1rio usando chaves {} e incluindo pares chave-valor separados por dois pontos ':' :</p> <pre><code>dicionario_vazio = {}\n\naluno = {\n    \"nome\": \"Joao\",\n    \"nota\": 8.7,\n    \"curso\": \"Ciencia da Computacao\"\n}\n</code></pre> <p>Os valores em um dicion\u00e1rio podem ser acessados usando suas chaves:</p> <pre><code>print(aluno[\"nome\"])  # Sa\u00edda: Joao\nprint(aluno[\"curso\"]) # Sa\u00edda: Ciencia da Computacao\n</code></pre> <p>Voc\u00ea pode modificar os valores associados \u00e0s chaves existentes ou adicionar novos pares chave-valor:</p> <pre><code>aluno[\"nome\"] = \"Pedro\"\nprint(aluno)  # Sa\u00edda: {'nome': 'Pedro', 'nota': 8.7, 'curso': 'Ciencia da Computacao'}\n</code></pre> <p>Voc\u00ea pode remover pares chave-valor de um dicion\u00e1rio usando os m\u00e9todos del, pop() e popitem().</p> <pre><code>del aluno[\"curso\"]\nprint(aluno) # Sa\u00edda: {'nome': 'Joao', 'nota': 8.7}\n\nnota = aluno.pop(\"nome\")\nprint(nota)   # Sa\u00edda: \"Joao\"\nprint(aluno)  # Sa\u00edda: {'nota': 8.7}\n\nultimo_item = aluno.popitem()\nprint(ultimo_item)  # Sa\u00edda: ('nota', 8.7)\nprint(aluno)        # Sa\u00edda: {}\n</code></pre> <p>Voc\u00ea pode iterar sobre os elementos de um dicion\u00e1rio usando um loop for. Existem tr\u00eas m\u00e9todos principais para acessar os elementos durante a itera\u00e7\u00e3o:</p> <p>--keys(): Retorna todas as chaves do dicion\u00e1rio. --values(): Retorna todos os valores do dicion\u00e1rio. --items(): Retorna pares chave-valor do dicion\u00e1rio.</p> <pre><code>for chave in aluno.keys():\n    print(chave)\n\nfor valor in aluno.values():\n    print(valor)\n\nfor chave, valor in aluno.items():\n    print(chave, valor)\n</code></pre> <p>Outros m\u00e9todos para trabalhar com dicion\u00e1rios:</p> <p>--get(): Retorna o valor para uma chave, ou um valor padr\u00e3o se a chave n\u00e3o existir. --clear(): Remove todos os elementos do dicion\u00e1rio. --copy(): Retorna uma c\u00f3pia rasa do dicion\u00e1rio.</p> <pre><code>nota = aluno.get(\"nota\")\nprint(idade)  # Sa\u00edda: 8.7\n\naluno.clear()\nprint(aluno)  # Sa\u00edda: {}\n\naluno = {\"nome\": \"Joao\", \"idade\": 22}\ncopia_aluno = aluno.copy()\nprint(copia_aluno)  # Sa\u00edda: {'nome': 'Joao', 'idade': 22}\n</code></pre>"},{"location":"Python/Estruturas%20da%20Linguagem/#estruturas-condicionais","title":"Estruturas Condicionais","text":"<p>Usamos estruturas condicionais para executar c\u00f3digo espec\u00edfico com base em determinadas condi\u00e7\u00f5es. A estrutura condicional mais comum \u00e9 o <code>if</code>:</p> <pre><code>x = 10\nif x &gt; 0:\n    print(\"x \u00e9 positivo\")\n</code></pre> <p>Tamb\u00e9m podemos adicionar um <code>else</code> para executar c\u00f3digo quando a condi\u00e7\u00e3o n\u00e3o \u00e9 verdadeira:</p> <pre><code>x = -10\nif x &gt; 0:\n    print(\"x \u00e9 positivo\")\nelse:\n    print(\"x n\u00e3o \u00e9 positivo\")\n</code></pre> <p>E podemos usar <code>elif</code> para verificar v\u00e1rias condi\u00e7\u00f5es:</p> <pre><code>x = 0\nif x &gt; 0:\n    print(\"x \u00e9 positivo\")\nelif x &lt; 0:\n    print(\"x \u00e9 negativo\")\nelse:\n    print(\"x \u00e9 zero\")\n</code></pre>"},{"location":"Python/Estruturas%20da%20Linguagem/#estruturas-de-repeticao","title":"Estruturas de Repeti\u00e7\u00e3o","text":"<p>Usamos loops para repetir um bloco de c\u00f3digo v\u00e1rias vezes. O loop <code>for</code> \u00e9 usado para iterar sobre uma sequ\u00eancia (como uma lista, tupla, dicion\u00e1rio, conjunto ou string):</p> <pre><code>for i in range(5):\n    print(i)\n</code></pre> <p>O loop <code>while</code> \u00e9 usado para repetir um bloco de c\u00f3digo enquanto uma condi\u00e7\u00e3o \u00e9 verdadeira:</p> <pre><code>i = 0\nwhile i &lt; 5:\n    print(i)\n    i += 1\n</code></pre>"},{"location":"Python/Estruturas%20da%20Linguagem/#funcoes","title":"Fun\u00e7\u00f5es","text":"<p>Em Python, uma fun\u00e7\u00e3o \u00e9 um bloco de c\u00f3digo reutiliz\u00e1vel que realiza uma a\u00e7\u00e3o espec\u00edfica. Definimos fun\u00e7\u00f5es usando a palavra-chave <code>def</code>:</p> <pre><code>def hello(name):\n    return \"Ol\u00e1, \" + name\n</code></pre> <p>Podemos ent\u00e3o chamar a fun\u00e7\u00e3o usando seu nome e passando os par\u00e2metros necess\u00e1rios:</p> <pre><code>print(hello(\"Mundo\"))\n</code></pre>"},{"location":"Python/Estruturas%20da%20Linguagem/#importacao-e-uso-de-bibliotecas","title":"Importa\u00e7\u00e3o e Uso de Bibliotecas","text":"<p>Em Python, podemos usar bibliotecas para adicionar funcionalidades ao nosso c\u00f3digo. Para usar uma biblioteca, primeiro precisamos import\u00e1-la usando a palavra-chave <code>import</code>:</p> <pre><code>import math\n</code></pre> <p>Podemos ent\u00e3o usar as fun\u00e7\u00f5es e classes da biblioteca:</p> <pre><code>print(math.sqrt(16))\n</code></pre> <p>Tamb\u00e9m podemos importar apenas partes espec\u00edficas de uma biblioteca:</p> <pre><code>from math import sqrt\n</code></pre> <p>E podemos dar um apelido a uma biblioteca para tornar nosso c\u00f3digo mais f\u00e1cil de escrever:</p> <pre><code>import math as m\n</code></pre>"},{"location":"Python/Gerenciador%20de%20Pacotes/","title":"O que \u00e9 o PIP?","text":"<p>PIP \u00e9 basicamente como uma loja online para o Python. Onde se  pode encontrar v\u00e1rios programas e ferramentas \u00fateis. \u00c9 como se o usu\u00e1rio estivesse procurando por aplicativos em uma loja de aplicativos, mas especificamente para o Python. Voc\u00ea pode simplesmente dizer ao PIP o que voc\u00ea quer e ele instala tudo para  o usu\u00e1rio, facilitando bastante o gerenciamento de programas Python no seu computador.</p>"},{"location":"Python/Gerenciador%20de%20Pacotes/#instalacao-do-pip","title":"Instala\u00e7\u00e3o do PIP","text":"<p>Na maioria das distribui\u00e7\u00f5es Python modernas, o PIP j\u00e1 vem instalado. No entanto, se voc\u00ea precisar instal\u00e1-lo manualmente, siga estas etapas:</p> <p>baixe em: https://bootstrap.pypa.io/get-pip.py -o get-pip.py Execute o script de instala\u00e7\u00e3o: python get-pip.py</p>"},{"location":"Python/Gerenciador%20de%20Pacotes/#comandos-basicos-do-pip","title":"Comandos B\u00e1sicos do PIP","text":""},{"location":"Python/Gerenciador%20de%20Pacotes/#instalar-um-pacote","title":"Instalar um Pacote","text":"<p>Para instalar um pacote, use o comando install seguido do nome do pacote. Por exemplo, para instalar o pacote requests:</p> <pre><code>pip install requests\n</code></pre>"},{"location":"Python/Gerenciador%20de%20Pacotes/#listar-pacotes-instalados","title":"Listar Pacotes Instalados","text":"<p>Para ver todos os pacotes instalados no seu ambiente Python, use:</p> <pre><code>pip list\n</code></pre>"},{"location":"Python/Gerenciador%20de%20Pacotes/#atualizar-um-pacote","title":"Atualizar um Pacote","text":"<p>Para atualizar um pacote para a vers\u00e3o mais recente, use o comando install com a op\u00e7\u00e3o --upgrade:</p> <pre><code>pip install --upgrade requests\n</code></pre>"},{"location":"Python/Gerenciador%20de%20Pacotes/#desinstalar-um-pacote","title":"Desinstalar um Pacote","text":"<p>Para remover um pacote instalado, use o comando uninstall:</p> <pre><code>pip uninstall requests\n</code></pre>"},{"location":"Python/Gerenciador%20de%20Pacotes/#usando-um-arquivo-requirementstxt","title":"Usando um Arquivo requirements.txt","text":"<p>Se voc\u00ea estiver trabalhando em um projeto que requer m\u00faltiplos pacotes, pode listar todos eles em um arquivo chamado requirements.txt e instalar todos de uma vez com:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"Python/Gerenciador%20de%20Pacotes/#criando-um-requirementstxt","title":"Criando um requirements.txt","text":"<p>Para gerar um arquivo requirements.txt com todos os pacotes instalados atualmente, use:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre>"},{"location":"Python/Gerenciador%20de%20Pacotes/#instalando-um-pacote-especifico","title":"Instalando um Pacote Espec\u00edfico","text":"<p>Instalando o pacote numpy:</p> <pre><code>pip install numpy\n</code></pre>"},{"location":"Python/Gerenciador%20de%20Pacotes/#instalando-uma-versao-especifica-de-um-pacote","title":"Instalando uma Vers\u00e3o Espec\u00edfica de um Pacote","text":"<p>Para instalar uma vers\u00e3o espec\u00edfica de um pacote, adicione == seguido do n\u00famero da vers\u00e3o:</p> <pre><code>pip install requests==2.25.1\n</code></pre>"},{"location":"Python/Gerenciador%20de%20Pacotes/#verificando-a-versao-de-um-pacote","title":"Verificando a Vers\u00e3o de um Pacote","text":"<p>Para verificar a vers\u00e3o de um pacote instalado:</p> <pre><code>pip show requests\n</code></pre>"},{"location":"Python/Gerenciador%20de%20Pacotes/#conclusao","title":"Conclus\u00e3o","text":"<p>O PIP simplifica enormemente o gerenciamento de pacotes Python, permitindo que voc\u00ea instale, atualize e remova pacotes de forma r\u00e1pida e eficiente. Dominar o uso do PIP \u00e9 uma habilidade essencial para qualquer desenvolvedor Python, pois facilita a inclus\u00e3o de bibliotecas e ferramentas que ampliam as capacidades dos seus projetos.</p>"}]}